{"version":3,"sources":["Nav.js","App.js","Book.js","serviceWorker.js","index.js"],"names":["querystring","qs","window","location","search","cookies","Cookies","languages","Nav","props","state","language","copy","title","subtitle","includes","lang","get","this","setState","prevState","set","path","fetch","CopyApi","then","responseCopyApi","json","catch","console","log","className","to","map","href","Component","App","carousel","blurbs","cards","style","paddingTop","carouselItem","Item","src","image","url","alt","fluid","rounded","Caption","description","slice","blurb","paragraph","card","width","marginRight","Header","as","icon","Img","variant","Body","Title","join","Text","features","feature","text","details","detail","button","marginTop","Book","value","booking","from","Date","name","email","telephone","type","handleChange","bind","handleSubmit","event","target","alert","preventDefault","onSubmit","onChange","message","React","Boolean","hostname","match","routing","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f0e2bb6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Cookies from 'universal-cookie';\r\nimport * as qs from 'query-string';\r\n\r\n\r\nconst querystring = qs.parse(window.location.search);\r\nconst cookies = new Cookies();\r\nconst CopyApi = 'https://raw.githubusercontent.com/bearslairs/bearslairs-data/master/copy';\r\nconst languages = ['bg', 'en', 'ru'];\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      language: 'en',\r\n      copy: {\r\n        title: '',\r\n        subtitle: '',\r\n        languages: []\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let language = languages.includes(querystring.lang) // if the querystring lang is set, use that\r\n      ? querystring.lang\r\n      : languages.includes(cookies.get('lang')) // else if the cookies contain a lang, use that\r\n        ? cookies.get('lang')\r\n        : this.state.language; // fall back to a default\r\n    this.setState(prevState => ({ \r\n      language: language,\r\n      copy: prevState.copy\r\n    }));\r\n    cookies.set('lang', language, { path: '/' });\r\n    fetch(CopyApi + '/' + language + '/nav.json')\r\n    .then(responseCopyApi => responseCopyApi.json())\r\n    .then((copy) => {\r\n      this.setState(prevState => ({\r\n        language: prevState.language,\r\n        copy: copy\r\n      }));\r\n    })\r\n    .catch(console.log);\r\n  }\r\n  render() {\r\n    return (\r\n      <header className=\"App-header clearfix\">\r\n        <LinkContainer to=\"/\">\r\n          <h1 className=\"float-left\">{this.state.copy.title}</h1>\r\n        </LinkContainer>\r\n        <h2 className=\"float-left text-muted\">{this.state.copy.subtitle}</h2>\r\n        <LinkContainer to=\"/book\">\r\n          <Button className=\"float-right\">book</Button>\r\n        </LinkContainer>\r\n        <span className=\"float-right text-muted\">\r\n          {\r\n            this.state.copy.languages.map(lang => (\r\n              <a href={'?lang=' + lang} className=\"text-muted\">{lang}</a>\r\n            ))\r\n          }\r\n        </span>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image';\nimport Button from 'react-bootstrap/Button';\nimport Carousel from 'react-bootstrap/Carousel';\nimport './App.css';\nimport Cookies from 'universal-cookie';\nimport Nav from './Nav';\nimport * as qs from 'query-string';\n\nconst querystring = qs.parse(window.location.search);\nconst cookies = new Cookies();\nconst CopyApi = 'https://raw.githubusercontent.com/bearslairs/bearslairs-data/master/copy';\nconst languages = ['bg', 'en', 'ru'];\n\nclass App extends Component {\n  state = {\n    language: 'en',\n    copy: {\n      carousel: [],\n      blurbs: [],\n      cards: []\n    }\n  };\n\n  componentDidMount() {\n    let language = languages.includes(querystring.lang) // if the querystring lang is set, use that\n      ? querystring.lang\n      : languages.includes(cookies.get('lang')) // else if the cookies contain a lang, use that\n        ? cookies.get('lang')\n        : this.state.language; // fall back to a default\n    this.setState(prevState => ({ \n      language: language,\n      copy: prevState.copy\n    }));\n    cookies.set('lang', language, { path: '/' });\n    fetch(CopyApi + '/' + language + '/home.json')\n    .then(responseCopyApi => responseCopyApi.json())\n    .then((copy) => {\n      this.setState(prevState => ({\n        language: prevState.language,\n        copy: copy\n      }));\n    })\n    .catch(console.log);\n  }\n  render() {\n    return (\n      <Container>\n        <Nav />\n        <Row style={{ paddingTop: '10px' }}>\n          <Carousel>\n            {\n              this.state.copy.carousel.map((carouselItem) => (\n                <Carousel.Item>\n                  <Image src={carouselItem.image.url} alt={carouselItem.image.alt} fluid rounded />\n                  <Carousel.Caption>\n                    <h3>{carouselItem.title}</h3>\n                    <p>{carouselItem.description}</p>\n                  </Carousel.Caption>\n                </Carousel.Item>\n              ))\n            }\n          </Carousel>\n        </Row>\n        <Row style={{ paddingTop: '10px' }}>\n          {\n            this.state.copy.blurbs.slice(0, 2).map((blurb) => (\n              <div>\n                <h4>{blurb.title}</h4>\n                {\n                  blurb.copy.map((paragraph) => (\n                    <p>{paragraph}</p>\n                  ))\n                }\n              </div>\n            ))\n          }\n        </Row>\n        <Row style={{ paddingTop: '10px' }}>\n          {\n            this.state.copy.cards.slice(0, 3).map((card) => (\n              <Card style={{ width: '30%', marginRight: '10px' }}>\n                <Card.Header as=\"h3\">\n                  {card.title}\n                  <Image src={card.icon.url} alt={card.icon.alt} fluid rounded style={{ marginRight: '10px' }} className=\"float-right\" />\n                </Card.Header>\n                <Card.Img variant=\"top\" src={card.image.url} alt={card.image.alt} fluid rounded />\n                <Card.Body>\n                  <Card.Title>\n                    {card.description.join(' ')}\n                  </Card.Title>\n                  <hr />\n                  <Card.Text>\n                    <ul>\n                      {\n                        card.features.map((feature) => (\n                          <li>\n                            {feature.text}\n                            <ul>\n                              {\n                                feature.details.map((detail) => (\n                                  <li>{detail}</li>\n                                ))\n                              }\n                            </ul>\n                          </li>\n                        ))\n                      }\n                    </ul>\n                    <Button variant=\"primary\" className=\"float-right\">{card.button.text}</Button>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))\n          }\n        </Row>\n        <Row style={{ paddingTop: '10px' }}>\n          {\n            this.state.copy.blurbs.slice(2, 4).map((blurb) => (\n              <div>\n                <h4>{blurb.title}</h4>\n                {\n                  blurb.copy.map((paragraph) => (\n                    <p>{paragraph}</p>\n                  ))\n                }\n              </div>\n            ))\n          }\n        </Row>\n        <Row style={{ paddingTop: '10px' }}>\n          {\n            this.state.copy.cards.slice(3, 6).map((card) => (\n              <Card style={{ width: '30%', marginRight: '10px' }}>\n                <Card.Header as=\"h3\">\n                  {card.title}\n                  <Image src={card.icon.url} alt={card.icon.alt} fluid rounded style={{ marginRight: '10px' }} className=\"float-right\" />\n                </Card.Header>\n                <Card.Img variant=\"top\" src={card.image.url} alt={card.image.alt} fluid rounded />\n                <Card.Body>\n                  <Card.Title>\n                    {card.description.join(' ')}\n                  </Card.Title>\n                  <hr />\n                  <Card.Text>\n                    <ul>\n                      {\n                        card.features.map((feature) => (\n                          <li>\n                            {feature.text}\n                            <ul>\n                              {\n                                feature.details.map((detail) => (\n                                  <li>{detail}</li>\n                                ))\n                              }\n                            </ul>\n                          </li>\n                        ))\n                      }\n                    </ul>\n                    <Button variant=\"primary\" className=\"float-right\">{card.button.text}</Button>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))\n          }\n        </Row>\n        <footer className=\"clearfix\" style={{ marginTop: '20px' }}>\n          <p className=\"text-center text-muted\">\n            <a href={'https://github.com/bearslairs/bearslairs-data/edit/master/copy/' + this.state.language + '/home.json'}>\n              edit this page\n            </a>\n          </p>\n        </footer>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Nav from './Nav';\r\nimport Cookies from 'universal-cookie';\r\nimport * as qs from 'query-string';\r\n\r\n/**********\r\nhttps://medium.com/@levvi/how-to-use-google-forms-as-a-free-email-service-for-your-custom-react-form-or-any-other-1aa837422a4\r\nhttps://github.com/llevvi/llevvi.github.io/blob/development/src/components/ContactBox/index.js\r\n/**********/\r\n\r\nconst querystring = qs.parse(window.location.search);\r\nconst cookies = new Cookies();\r\nconst CopyApi = 'https://raw.githubusercontent.com/bearslairs/bearslairs-data/master/copy';\r\nconst languages = ['bg', 'en', 'ru'];\r\n\r\nclass Book extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n      language: 'en',\r\n      booking: {\r\n      \tfrom: new Date(),\r\n      \tto: new Date(),\r\n      \tname: '',\r\n      \temail: '',\r\n      \ttelephone: '',\r\n      \ttype: '',\r\n      \tlanguage: ''\r\n      },\r\n      copy: {\r\n        languages: []\r\n      }\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('A name was submitted: ' + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(CopyApi + '/' + this.state.language + '/book.json')\r\n    .then(responseCopyApi => responseCopyApi.json())\r\n    .then((copy) => {\r\n      this.setState(prevState => ({\r\n        language: prevState.language,\r\n        copy: copy\r\n      }));\r\n    })\r\n    .catch(console.log);\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Nav />\r\n        <Row style={{ paddingTop: '10px' }}>\r\n    \t  <h2>make a booking</h2>\r\n    \t  <form onSubmit={this.handleSubmit}>\r\n    \t    <input type='email' name='email' value={this.state.email} onChange={this.handleChange} />\r\n    \t    <textarea name='message' value={this.state.message} onChange={this.handleChange} />\r\n    \t    <button type='submit'>Submit</button>\r\n    \t  </form>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Book;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Book from './Book';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst routing = (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/book\" component={Book} />\n    </Switch>\n  </BrowserRouter>\n);\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}